/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package frames;

import classes.DatabaseConnect;
import classes.ServerThread;
import classes.ServerThreadBus;
import java.io.File;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Danh Del Rey
 */
public class ServerFrame extends javax.swing.JFrame {

    public static volatile ServerThreadBus serverThreadBus;
    public static Socket socketOfServer;
    public static String splitterString = ":,;,:";

    /**
     * Creates new form ServerFrame
     */
    public ServerFrame() {
        initComponents();
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        this.setLocationRelativeTo(null);
        this.setVisible(true);
    }

    public static void main(String args[]) {
        ServerFrame serverFrame = new ServerFrame();
        DatabaseConnect.getJDbConnection();

        ServerSocket listener = null;
        serverThreadBus = new ServerThreadBus();

        //server closing event
        serverFrame.addWindowListener(
                new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent
            ) {
                if (JOptionPane.showConfirmDialog(serverFrame, "Are you sure you want to close this server?", "Close Server?", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
                    closeServer();
                    System.exit(0);
                } else {
                    serverFrame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
                }
            }
        }
        );

        logMessage("Server is waiting to accept user...");

        // Mở một ServerSocket tại cổng 7777.
        // Chú ý bạn không thể chọn cổng nhỏ hơn 1023 nếu không là người dùng
        // đặc quyền (privileged users (root)).
        try {
            listener = new ServerSocket(7777);
        } catch (IOException e) {

            System.exit(1);
        }
        ThreadPoolExecutor executor = new ThreadPoolExecutor(
                10, // corePoolSize
                100, // maximumPoolSize
                10, // thread timeout
                TimeUnit.SECONDS,
                new ArrayBlockingQueue<>(8) // queueCapacity
        );

        try {
            while (true) {
                // Chấp nhận một yêu cầu kết nối từ phía Client.
                // Đồng thời nhận được một đối tượng Socket tại server.
                socketOfServer = listener.accept();
                ServerThread serverThread = new ServerThread(socketOfServer); //check
                serverThreadBus.add(serverThread); //check
                logMessage("The number of running threads is: " + serverThreadBus.getLength()); //check
                executor.execute(serverThread);

            }
        } catch (IOException ex) {
            ex.printStackTrace();
        } finally {
            try {
                listener.close();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }

    }

    public static void logMessage(String message) {
        contentTextArea.setText(contentTextArea.getText() + message + "\n");
    }

    public static void closeServer() {
        //delete all files that clients sent
        String filePath = "./src/main/resources/";
        File root = new File(filePath);

        File[] directories = root.listFiles();
        if (directories != null) {
            for (File dir : directories) {
                String[] entries = dir.list();
                if (entries != null) {
                    for (String s : entries) {
                        File currentFile = new File(dir.getPath(), s);
                        currentFile.delete();
                    }
                }
                dir.delete();
            }
        }

        //send message to all clients
        ServerFrame.serverThreadBus.mutilCastSend("server-closed");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        contentScrollPane = new javax.swing.JScrollPane();
        contentTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        contentTextArea.setEditable(false);
        contentTextArea.setColumns(20);
        contentTextArea.setRows(5);
        contentScrollPane.setViewportView(contentTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(contentScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(contentScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane contentScrollPane;
    public static javax.swing.JTextArea contentTextArea;
    // End of variables declaration//GEN-END:variables
}
